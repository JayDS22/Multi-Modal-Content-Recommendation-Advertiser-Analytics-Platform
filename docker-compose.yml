version: '3.8'

services:
  # ============================================================================
  # API Service
  # ============================================================================
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    container_name: recommendation-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=development
      - DEBUG=true
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/recommendation_db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./checkpoints:/app/checkpoints
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - recommendation-network
    command: uvicorn src.api.server:app --host 0.0.0.0 --port 8000 --reload

  # ============================================================================
  # PostgreSQL Database
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: recommendation-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=recommendation_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - recommendation-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # Redis Cache
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: recommendation-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - recommendation-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # Celery Worker (Optional - for async tasks)
  # ============================================================================
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: application
    container_name: recommendation-worker
    restart: unless-stopped
    environment:
      - APP_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/recommendation_db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./checkpoints:/app/checkpoints
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - recommendation-network
    command: celery -A src.tasks.celery worker --loglevel=info

  # ============================================================================
  # TensorBoard (Optional - for training visualization)
  # ============================================================================
  tensorboard:
    image: tensorflow/tensorflow:latest
    container_name: recommendation-tensorboard
    restart: unless-stopped
    ports:
      - "6006:6006"
    volumes:
      - ./logs:/logs
      - ./runs:/runs
    networks:
      - recommendation-network
    command: tensorboard --logdir=/logs --host=0.0.0.0 --port=6006

  # ============================================================================
  # Jupyter Notebook (Optional - for experiments)
  # ============================================================================
  jupyter:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    container_name: recommendation-jupyter
    restart: unless-stopped
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./notebooks:/app/notebooks
      - ./src:/app/src
      - ./data:/app/data
    networks:
      - recommendation-network
    command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token=''

  # ============================================================================
  # NGINX (Optional - reverse proxy for production)
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: recommendation-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./static:/usr/share/nginx/html
    depends_on:
      - api
    networks:
      - recommendation-network

# ============================================================================
# Networks
# ============================================================================
networks:
  recommendation-network:
    driver: bridge

# ============================================================================
# Volumes
# ============================================================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
